---
AWSTemplateFormatVersion: '2010-09-09'

Description: |
  Automate deployment of OpenVPN Access Server with the following features:
  * Let's Encrypt
  * Custom VPC CIDR
  * Security Groups
  * Use of NACLs
  * VPC Flow Logs
  * EC2 Systems Manager (SSM) Ready

# Help for CloudFormation Metadata
# http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: CLOUDFLARE
      Parameters: 
      - SSMCFzoneid
      - SSMCFAuthSecret
      - CFemail
    - Label:
        default: LET'S ENCRYPT
      Parameters: 
      - LetsEncryptEmail
    - Label:
        default: VPC NETWORKING
      Parameters:
      - VPCCIDR
    - Label:
        default: TAG PREFIX
      Parameters:
      - TagPrefixer
    - Label:
        default: OpenVPN AS INSTANCE
      Parameters:
      - OpenVPNASDNSName
      - InstanceSize
      - KeyName
    - Label:
        default: SECURITY & MONITORING
      Parameters:
      - OpenVPNASAccessIP
      - OpenUse
      - OpenVPNASAdminUser
      - SSMOpenVPNASAdminSecret
      - VPCFlowLogRetention
    ParameterLabels:
      SSMCFzoneid:
        default: DNS Zone ID
      SSMCFAuthSecret:
        default: Global API Key
      CFemail:
        default: CloudFlare Email
      LetsEncryptEmail:
        default: Let's Encrypt Email
      VPCCIDR:
        default: Custom VPC CIDR
      TagPrefixer:
        default: Custom Resource Tag
      OpenVPNASDNSName:
        default: Public FQDN
      InstanceSize:
        default: Instance Size
      KeyName:
        default: EC2 Key Pair
      OpenVPNASAccessIP:
        default: Web Admin UI IP
      OpenUse:
        default: Open VPN Access
      OpenVPNASAdminUser:
        default: Web Admin Administrator Username
      SSMOpenVPNASAdminSecret:
        default: Web Admin Administrator Password
      VPCFlowLogRetention:
        default: VPC Flow Log Retention.
# Help for CloudFormation Parameters
# http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html
Parameters:
  SSMCFzoneid:
    Description: EC2 SSM Secure String Parameter Store name that references your CloudFlare Zone ID.
    Type: String
    Default: REQUIRED 
  SSMCFAuthSecret:
    Description: EC2 SSM Secure String Parameter Store name that references your CloudFlare Global API key.
    Type: String
    Default: REQUIRED
  CFemail: 
    Description: Enter your registered CloudFlare account email address. You can find it in  My Account Settings --> Email Address
    Type: String
    Default: REQUIRED
  LetsEncryptEmail:
    Description: Enter an email address for your Let's Encrypt certificate.
    Type: String
    Default: REQUIRED
  VPCCIDR:
    Description: Enter a custom CIDR for your OpenVPN AS VPC using the first two octets.
    Type: String
    Default: 10.10.
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\."
    ConstraintDescription: 'Choose the first two octets of a CIDR. i.e. 10.10.'
  TagPrefixer:
    Description: Enter your own tag prefix to help identify resources created by this stack.
    Type: String
    Default: LE-OPENVPNAS-
    # Generally allowed characters for AWS TAGs are: letters, spaces, and numbers representable in UTF-8, plus the following special characters: + - = . _ : / @. (Ref: http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html)
    # [\.\-_/#A-Za-z0-9]+ Required for AWS::Logs::LogGroup
    AllowedPattern: "[\\w\\-\\/\\.]*"
  OpenVPNASDNSName:
    Description: Enter the public FQDN for the OpenVPN AS instance and Let's Encrypt certificate.
    Type: String
    Default: yourdomain.com
    # Jesus REGEX can be a pain in the rear. http://rubular.com/ is a good resource if you get stuck. 
    # Helpful but usually not reference for REGEX in CloudFormation templates: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-regexes.html
    AllowedPattern: "^([a-z0-9]|[a-z0-9][a-z0-9\\-]{0,61}[a-z0-9])(\\.([a-z0-9]|[a-z0-9][a-z0-9\\-]{0,61}[a-z0-9]))*$"
    ConstraintDescription: Must be a valid RFC-952 or RFC-1123 DNS hostname.
  InstanceSize:
    Description: Choose an instance size. Deafult is the AWS Free Tier eligible t2.micro.
    Type: String
    Default: t2.micro
    AllowedValues:
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - t2.xlarge
    - t2.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c3.4xlarge
    - c3.8xlarge
  KeyName:
    Description: REQUIRED - Select an EXISTING EC2 key pair to launch this OpenVPN AS instance.
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: You must choose the name of an existing EC2 KeyPair 
  OpenVPNASAccessIP:
    Description: Enter the source IP address that will be used to access the Web Admin UI. Use 0.0.0.0/0 to open to the world (Not Recommended).
    Type: String
    MinLength: 9
    MaxLength: 18
    Default : 0.0.0.0/32
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})(/32|/0)"
    ConstraintDescription: Must be a valid CIDR range of the form x.x.x.x/x
  OpenUse:
    Description: Select 'YES' to open up 1194 to 0.0.0.0/0. 'NO' defaults to the admin web console source IP entered above.
    Default: 'NO'
    Type: String
    AllowedValues:
    - 'YES'
    - 'NO'
    ConstraintDescription: You must specify YES or NO.
  OpenVPNASAdminUser:
    Description: Minimum of 4 characters. Avoid using the default 'openvpnas' username.
    Type: String
    MinLength: 4
    MaxLength: 50
    Default: ChangeOrBePwned
    AllowedPattern: "([A-Za-z0-9-]*)"
    ConstraintDescription: Name must only contain alphanumeric characters between 4 and 50 characters.
  SSMOpenVPNASAdminSecret:
    Description: EC2 SSM Secure String Parameter Store name that references your OpenVPN AS Web Admin Administrator Password.
    Type: String
    Default: ChangeOrBePwned
  VPCFlowLogRetention:
    # Information source: Ref: http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/flow-logs.html#flow-log-records
    Description: Select the number of days to retain VPC Flow Logs.
    Type: Number
    Default: '7'
    AllowedValues:
    - '7'
    - '14'
    - '30'
    - '60'
    - '120'
    - '150'
    - '180'
    - '365'
    - '400'
    - '545'
    - '731'
    - '1827'
    - '3653'
# Help for CloudFormation Mappings
# http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/mappings-section-structure.html
Mappings:
  RegionMap:  
    # Asia Pacific (Mumbai)
    ap-south-1:
      BYOLAMI: ami-fca0de93
    # EU (London)
    eu-west-2:
      BYOLAMI: ami-022f3966   
    # EU (Ireland)
    eu-west-1:
      BYOLAMI: ami-015fbb78   
    # Asia Pacific (Seoul)
    ap-northeast-2:
      BYOLAMI: ami-d4459aba
    # Asia Pacific (Tokyo)
    ap-northeast-1:
      BYOLAMI: ami-eb9c8f8c   
    # South America (SÃ£o Paulo)
    sa-east-1:
      BYOLAMI: ami-349af058    
    # Canada (Central)
    ca-central-1:
      BYOLAMI: ami-9d912ef9    
    # Asia Pacific (Singapore)
    ap-southeast-1:
      BYOLAMI: ami-76ef6715   
    # Asia Pacific (Sydney)
    ap-southeast-2:
      BYOLAMI: ami-f981929a    
    # EU (Frankfurt)
    eu-central-1:
      BYOLAMI: ami-906ccdff    
    # US East (N. Virginia)
    us-east-1:
      BYOLAMI: ami-d7576bc1    
    # US East (Ohio)
    us-east-2:
      BYOLAMI: ami-5f35143a    
    # US West (N. California)
    us-west-1:
      BYOLAMI: ami-ee89a58e    
    # US West (Oregon)
    us-west-2:
      BYOLAMI: ami-d10819a8
# If using China or GovCloud will need to find your AMI.
#    # China Beijing
#    cn-north-1:
#      BYOLAMI: ami-XXXXXXXX
#    # AWS GovCloud
#    us-gov-west-1:
#      BYOLAMI: ami-XXXXXXXX    
Conditions:
  CreateOpenOpenVPNSG: !Equals [ !Ref OpenUse, YES ]
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Fn::Join:
        - ''
        - - Ref: VPCCIDR
          - '0'
          - ".0"
          - "/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - Ref: TagPrefixer
            - VPC
  # S3 VPC Endpoints to get Ubuntu updates via AWS Internal network and save $$$ on network bandwidth.
  S3Endpoint:
    DependsOn:
    - PublicRouteTable
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: AmazonLinuxRepositoryAccess
          Effect: Allow
          Principal: '*'
          Action:
          - s3:GetObject
          Resource:
          - arn:aws:s3:::packages.*.amazonaws.com/*
          - arn:aws:s3:::repo.*.amazonaws.com/*
      RouteTableIds: 
       - !Ref 1aPrivateRouteTable
       - !Ref PublicRouteTable
      ServiceName: !Join ['', [com.amazonaws., !Ref 'AWS::Region', .s3]]
      VpcId: !Ref VPC
  1aVPCPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs: ''
      CidrBlock:
        Fn::Join:
        - ''
        - - Ref: VPCCIDR
          - '0'
          - ".0"
          # Limit amount of IPs available because not needed; /28 is the smallest AWS allows
          - "/28"
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - Ref: TagPrefixer
            - 1a-INTERNET
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - Ref: TagPrefixer
            - 1a-INTERNET-ROUTE
  1aPublicSubnetAssociate:
    DependsOn:
    - 1aVPCPublicSubnet
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: 1aVPCPublicSubnet
      RouteTableId:
        Ref: PublicRouteTable
  1aPrivateSubnetAssociateInside:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: 1aVPCPrivateSubnet
      RouteTableId:
        Ref: 1aPrivateRouteTable
  1aVPCPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs: ''
      CidrBlock:
        Fn::Join:
        - ''
        - - Ref: VPCCIDR
          - '1'
          - ".0"
          # Limit amount of IPs available because not needed.
          - "/28"
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - Ref: TagPrefixer
            - 1a-PRIVATE
  1aPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - Ref: TagPrefixer
            - 1a-PRIVATE-ROUTE
  # Help for CloudFormation EC2 Route
  # http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route.html
  1aPrivateRoute:
    DependsOn:
    - OpenVPNASInstance
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId:
        Ref: 1aPrivateRouteTable
      InstanceId:
        Ref: OpenVPNASInstance          
  # Help for CloudFormation NAT Gateway
  # http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-natgateway.html
  #EIP:
  #  DependsOn:
  #  - OpenVPNASInstance
  #  Type: AWS::EC2::EIP
  #  Properties:
  #   InstanceId: !Ref OpenVPNASInstance
  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: !Ref VPC
  IPAssoc:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref OpenVPNASInstance
      EIP: !Ref EIP
  1aInternetRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VPCInternetGateway
  VPCInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - Ref: TagPrefixer
            - IGW
  VPCInternetGatewayAttach:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: VPCInternetGateway
      VpcId:
        Ref: VPC
  # Keep Web Admin Console locked down to 443 only.
  OpenVPNASAdminConsoleSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access OpenVPN AS Admin Console
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp:
         Ref: OpenVPNASAccessIP
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - Ref: TagPrefixer
            - OPENVPN-AS-ADMIN-CONSOLE
      VpcId:
        Ref: VPC
  # This SG is intentionally left empty; User Data script below should populate it.
  LetEncryptSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      # Group names can only have these characters: a-zA-Z0-9. _-:/()#,@[]+=&;{}!$*
      GroupDescription: Lets Encrypt Authorization
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - Ref: TagPrefixer
            - OPENVPN-AS-LETS-ENCRYPT
      VpcId:
        Ref: VPC
  # SSH should never be open to 0.0.0.0/0!!!
  SSHOpenVPNASSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access OpenVPN AS via SSH
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp:
         Ref: OpenVPNASAccessIP
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - Ref: TagPrefixer
            - OPENVPN-AS-SSH-ACCESS
      VpcId:
        Ref: VPC
  # Ideally this would be locked down by source IP but if on mobile or public IP served via DHCP, no choice.
  OpenVPNVPNASSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: VPN Access to OpenVPN AS
      SecurityGroupIngress:
      - IpProtocol: udp
        FromPort: '1194'
        ToPort: '1194'
        CidrIp: !If [CreateOpenOpenVPNSG, 0.0.0.0/0, !Ref OpenVPNASAccessIP]
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - Ref: TagPrefixer
            - OPENVPN-VPN-ACCESS
      VpcId:
        Ref: VPC       
  PublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - Ref: TagPrefixer
            - PUBLIC-OPENVPN-NACL
  InboundPublicSSHNACL:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties: 
      CidrBlock: 0.0.0.0/0
      Egress: False
      NetworkAclId:
        Ref: PublicNetworkAcl
      PortRange:
        From: '22'
        To: '22'
      Protocol: 6
      RuleAction : allow
      RuleNumber : 100
  InboundPublicHTTPNACL:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties: 
      CidrBlock: 0.0.0.0/0
      Egress: False
      NetworkAclId:
        Ref: PublicNetworkAcl
      PortRange:
        From: '80'
        To: '80'
      Protocol: 6
      RuleAction : allow
      RuleNumber : 110
  InboundPublicHTTPSNACL:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties: 
      CidrBlock: 0.0.0.0/0
      Egress: False
      NetworkAclId:
        Ref: PublicNetworkAcl
      PortRange:
        From: '443'
        To: '443'
      Protocol: 6
      RuleAction : allow
      RuleNumber : 120
  InboundPublicOpenVPNNACL:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties: 
      CidrBlock: 0.0.0.0/0
      Egress: False
      NetworkAclId:
        Ref: PublicNetworkAcl
      PortRange:
        From: '1194'
        To: '1194'
      Protocol: 17
      RuleAction : allow
      RuleNumber : 130
  InboundPublicRepliesNACL:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties: 
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId:
        Ref: PublicNetworkAcl
      # Many type of clients will have replies so use this range.
      # Help for Ephemeral ports and how to use:
      # http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_ACLs.html#VPC_ACLs_Ephemeral_Ports
      PortRange:
        From: '1024'
        To: '65535'
      Protocol: 6
      RuleAction : allow
      RuleNumber : 140
  OutboundPublicSSHNACL:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties: 
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId:
        Ref: PublicNetworkAcl
      PortRange:
        From: '22'
        To: '22'
      Protocol: 6
      RuleAction : allow
      RuleNumber : 100
  OutboundPublicHTTPNACL:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties: 
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId:
        Ref: PublicNetworkAcl
      PortRange:
        From: '80'
        To: '80'
      Protocol: 6
      RuleAction : allow
      RuleNumber : 110
  OutboundPublicHTTPSNACL:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties: 
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId:
        Ref: PublicNetworkAcl
      PortRange:
        From: '443'
        To: '443'
      Protocol: 6
      RuleAction : allow
      RuleNumber : 120
  OutboundPublicOpenVPNNACL:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties: 
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId:
        Ref: PublicNetworkAcl
      PortRange:
        From: '1194'
        To: '1194'
      Protocol: 17
      RuleAction : allow
      RuleNumber : 130
  PublicSSMOutboundRepliesNACL:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties: 
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId:
        Ref: PublicNetworkAcl
      PortRange:
        # OpenVPN AS is Linux based so use this range. Ref. http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_ACLs.html#VPC_ACLs_Ephemeral_Ports
        From: '32768'
        To: '65535'
        #To: '61000' - THis was causing connection problems because too low.
      Protocol: 6
      RuleAction : allow
      RuleNumber : 140
  PublicNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: 1aVPCPublicSubnet
      NetworkAclId:
        Ref: PublicNetworkAcl
  # Help for CloudFormation EC2 Instance
  # http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-instance.html
  OpenVPNASInstance:
    DependsOn:
    - OpenVPNInstanceRole
    - S3Endpoint
    Type: AWS::EC2::Instance
    Metadata: 
      AWS::CloudFormation::Init: 
        config: 
          commands: 
            # This is CloudFlare's API command to update DNS. The line below adds a record.
            # Reference: https://api.cloudflare.com/#dns-records-for-a-zone-update-dns-record
            a:
              # Probably could have used ENV: for this but too much escaping so did it inline. 
              command: !Sub |
                curl -X POST "https://api.cloudflare.com/client/v4/zones/`aws ssm get-parameters --region ${AWS::Region} --names ${SSMCFzoneid} --with-decryption --output text | cut -f4`/dns_records" -H "X-Auth-Email: ${CFemail}" -H "X-Auth-Key: `aws ssm get-parameters --region ${AWS::Region} --names ${SSMCFAuthSecret} --with-decryption --output text | cut -f4`" -H "Content-Type: application/json" --data '{"type":"A","name":"${OpenVPNASDNSName}","content":"${EIP}","ttl":120,"proxied":False}'
            b:
              command: "wget https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/debian_amd64/amazon-ssm-agent.deb"
              cwd: "/tmp"
            # Annoying that there is no amazon-ssm-agent package for Ubuntu so have to install like this.
            c:
              command: "dpkg -i amazon-ssm-agent.deb"
              cwd: "/tmp"
            d:
              command: "systemctl enable amazon-ssm-agent"
            e:
              command: "rm amazon-ssm-agent.deb"
              cwd: "/tmp"
            # These are the OpenVPN AS command-line customizations. From within the instance or using the AWS Run Command you can see what is set by using the command: /usr/local/openvpn_as/scripts/sacli ConfigQuery
            f:
              command: "/usr/local/openvpn_as/scripts/sacli --key vpn.client.tls_version_min --value 1.2 ConfigPut"
            g:
              command: "/usr/local/openvpn_as/scripts/sacli --key vpn.client.tls_version_min_strict --value true ConfigPut"
            h:
              command: "/usr/local/openvpn_as/scripts/sacli --key vpn.server.tls_version_min --value 1.2 ConfigPut"
            i:
              command: "/usr/local/openvpn_as/scripts/sacli --key cs.tls_version_min --value 1.2 ConfigPut"
            j:
              command: "/usr/local/openvpn_as/scripts/sacli --key cs.tls_version_min_strict --value true ConfigPut"
            # OpenVPN AS supported ciphers listed here: https://openvpn.net/index.php/access-server/docs/admin-guides/437-how-to-change-the-cipher-in-openvpn-access-server.html
            k:
              command: "/usr/local/openvpn_as/scripts/sacli --key vpn.client.config_text --value 'cipher AES-256-CBC' ConfigPut"
            l:
              command: "/usr/local/openvpn_as/scripts/sacli --key vpn.server.config_text --value 'cipher AES-256-CBC' ConfigPut"
            # This setting got me an A on Qualys SSL Labs. Dicpher string codes here, ! means remove: https://www.openssl.org/docs/man1.0.2/apps/ciphers.html
            m:
              command: "/usr/local/openvpn_as/scripts/sacli -k cs.openssl_ciphersuites -v 'DEFAULT:!EXP:!PSK:!SRP:!RC4:!RSA:!3DES' ConfigPut"
            # Changes require a restart.
            n:
              command: "/usr/local/openvpn_as/scripts/sacli start"      
            # This is where the Parameter Store secure string is passed and changes the insecure 'ChangeMePlease' default password. However, if using a default SSM KMS key the instance role and IAM action get-parameters will allow decryption of the secure string so either remove SSH access and/or remove the IAM policy action.
            o:
              command: !Sub |
                /usr/local/openvpn_as/scripts/ovpnpasswd -u ${OpenVPNASAdminUser} -p `aws ssm get-parameters --region ${AWS::Region} --names ${SSMOpenVPNASAdminSecret} --with-decryption --output text | cut -f4`
    Properties:
      InstanceType:
        Ref: InstanceSize
      IamInstanceProfile:
        Ref: OpenVPNInstanceProfile
      KeyName:
        Ref: KeyName
      # Use the first available IP instead of a random, DHCP one.
      PrivateIpAddress: !Join [ "", [Ref: VPCCIDR, "0", ".5"]]
      SourceDestCheck: false
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", BYOLAMI ]
      SecurityGroupIds:
        - Ref: OpenVPNASAdminConsoleSG
        - Ref: SSHOpenVPNASSG
        - Ref: OpenVPNVPNASSG
        - Ref: LetEncryptSG
      SubnetId:
        Ref: 1aVPCPublicSubnet
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - Ref: TagPrefixer
            - OPENVPN-AS-INSTANCE
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt -y update
          apt -y install python-pip
          pip install awscli
          public_hostname=${OpenVPNASDNSName}
          admin_user=${OpenVPNASAdminUser}
          admin_pw=ChangeMePlease
          reroute_gw=1
          reroute_dns=1
          pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          cfn-init -v --stack ${AWS::StackName} --resource OpenVPNASInstance --region ${AWS::Region}

          add-apt-repository -y ppa:certbot/certbot
          apt -y update
          apt -y install certbot 
          certbot certonly --standalone --non-interactive --agree-tos --email ${CFemail} --domains ${OpenVPNASDNSName} --pre-hook 'sudo service openvpnas stop' --post-hook 'sudo service openvpnas start'

          /usr/local/openvpn_as/scripts/sacli stop
          /usr/local/openvpn_as/scripts/confdba -mk cs.ca_bundle -v "`cat /etc/letsencrypt/live/${OpenVPNASDNSName}/fullchain.pem`"
          /usr/local/openvpn_as/scripts/confdba -mk cs.priv_key -v "`cat /etc/letsencrypt/live/${OpenVPNASDNSName}/privkey.pem`" > /dev/null
          /usr/local/openvpn_as/scripts/confdba -mk cs.cert -v "`cat /etc/letsencrypt/live/${OpenVPNASDNSName}/cert.pem`"
          /usr/local/openvpn_as/scripts/sacli start
  OpenVPNInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Join:
        - ''
        - - Ref: AWS::Region
          - "-"
          - Fn::Join:
            - ''
            - - Ref: TagPrefixer
              - OPENVPN-AS-INSTANCE-ROLE
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
            - ssm.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
  OpenVPNInstanceProfile:
    DependsOn:
    - OpenVPNInstanceRole
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: OpenVPNInstanceRole                
  VPCFlowLogsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Join:
        - ''
        - - Ref: AWS::Region
          - "-"
          - Fn::Join:
            - ''
            - - Ref: TagPrefixer
              - OPENVPN-AS-VPC-FLOW-LOGS
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - vpc-flow-logs.amazonaws.com
          Action:
          - sts:AssumeRole
  FlowLogsRolePolicy:
    DependsOn:
    - VPCFlowLogsRole
    Type: AWS::IAM::Policy
    Properties:
      PolicyName:
        Fn::Join:
        - ''
        - - Ref: TagPrefixer
          - OPENVPN-AS-VPC-FLOW-LOGS
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:DescribeLogGroups
          - logs:DescribeLogStreams
          - logs:PutLogEvents
          Resource: "*"
      Roles:
      - Ref: VPCFlowLogsRole
  VPCFlowLogsGroup:
    DeletionPolicy: Delete
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Join:
        - ''
        - - Ref: TagPrefixer
          - OPENVPN-AS-VPC-FLOW-LOGS-GROUP
      RetentionInDays:
        Ref: VPCFlowLogRetention
  VPCFlowLogs:
    DependsOn:
    - VPCFlowLogsGroup
    Type: AWS::EC2::FlowLog
    Properties:
      DeliverLogsPermissionArn:
        Fn::GetAtt:
        - VPCFlowLogsRole
        - Arn
      LogGroupName:
        Ref: VPCFlowLogsGroup
      ResourceId:
        Ref: VPC
      ResourceType: VPC
      TrafficType: ALL
  # This is using LEAST priviledge however, if the instance is compromised an attacker can add ingress IPs and ports
  # from the AWS CLI. One compensating control could be to remove the role after successful deployment. If Let's Encrypt
  # would publish their IPs like CloudFlare does this issue would be easily solved.
  # Reference: https://letsencrypt.org/docs/faq/
  LetsEncryptSGUpdatePolicy:
    DependsOn:
    - OpenVPNInstanceRole
    Type: AWS::IAM::Policy
    Properties:
      PolicyName:
        Fn::Join:
        - ''
        - - Ref: TagPrefixer
          - OPENVPN-AS-LETSENCRYPT-SG-UPDATER
      PolicyDocument:
        Statement:
        - Sid: WhiteListLetsEncrypt
          Effect: Allow
          Action:
          - ec2:AuthorizeSecurityGroupIngress
          Resource:
          - !Join ['', ['arn:aws:ec2:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', security-group/, !Ref LetEncryptSG ]]
      Roles:
      - Ref: OpenVPNInstanceRole
  CloudWatchMetricsPolicy:
    DependsOn:
      - OpenVPNInstanceRole
    Type: AWS::IAM::Policy
    Properties:
      PolicyName:
        Fn::Join:
        - ''
        - - Ref: TagPrefixer
          - OPENVPN-AS-CLOUDWATCH-METRICS
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
          - cloudwatch:GetMetricStatistics
          - cloudwatch:ListMetrics
          - cloudwatch:PutMetricData
          Resource:
          - "*"
        - Sid: Stmt1454327816000
          Effect: Allow
          Action:
          - ec2:DescribeTags
          Resource:
          - "*"
      Roles:
      - Ref: OpenVPNInstanceRole
  InstanceCWLogsPolicy:
    DependsOn:
    - OpenVPNInstanceRole
    Type: AWS::IAM::Policy
    Properties:
      PolicyName:
        Fn::Join:
        - ''
        - - Ref: TagPrefixer
          - OPENVPN-AS-CLOUDWATCH-LOGS
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
          - cloudwatch:GetMetricStatistics
          - cloudwatch:ListMetrics
          - cloudwatch:PutMetricData
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          - logs:DescribeLogStreams
          Resource: "*"
      Roles:
      - Ref: OpenVPNInstanceRole
# Help for CloudFormation Outputs
# http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/outputs-section-structure.html
Outputs:
  1aOpenVPNEIPName:
    Description: Admin Login URL.
    Value: !Join [ "", [ "https://", Ref: OpenVPNASDNSName, "/admin" ] ]